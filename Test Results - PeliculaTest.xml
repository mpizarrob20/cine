<?xml version="1.0" encoding="UTF-8"?><testrun duration="1521" footerText="Generated by IntelliJ IDEA on 25/08/16 20:10" name="PeliculaTest">
    <count name="total" value="4"/>
    <count name="failed" value="1"/>
    <count name="passed" value="3"/>
    <config nameIsGenerated="true" configId="JUnit" name="PeliculaTest">
        <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea">
            <pattern>
                <option name="PATTERN" value="cine.model.*"/>
                <option name="ENABLED" value="true"/>
            </pattern>
        </extension>
        <module name="Cine"/>
        <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
        <option name="ALTERNATIVE_JRE_PATH"/>
        <option name="PACKAGE_NAME" value="cine.model"/>
        <option name="MAIN_CLASS_NAME" value="cine.model.PeliculaTest"/>
        <option name="METHOD_NAME"/>
        <option name="TEST_OBJECT" value="class"/>
        <option name="VM_PARAMETERS" value="-ea"/>
        <option name="PARAMETERS"/>
        <option name="WORKING_DIRECTORY" value="$MODULE_DIR$"/>
        <option name="ENV_VARIABLES"/>
        <option name="PASS_PARENT_ENVS" value="true"/>
        <option name="TEST_SEARCH_SCOPE">
            <value defaultName="singleModule"/>
        </option>
        <envs/>
        <patterns/>
    </config>
    <root name="PeliculaTest" comment="cine.model" location="java:suite://cine.model.PeliculaTest"/>
    <test duration="1210" locationUrl="java:test://cine.model.PeliculaTest.delete" name="PeliculaTest.delete" status="passed">
        <output type="stdout">before()
Hibernate: select pago0_.id as id1_0_0_, pago0_.tipoPago as tipoPago2_0_0_ from Pago pago0_ where pago0_.id=?
Hibernate: delete from Pago where id=?
Hibernate: select pago0_.id as id1_0_0_, pago0_.tipoPago as tipoPago2_0_0_ from Pago pago0_ where pago0_.id=?
after()
</output>
    </test>
    <test duration="152" locationUrl="java:test://cine.model.PeliculaTest.update" name="PeliculaTest.update" status="passed">
        <output type="stdout">before()
Hibernate: select pago0_.id as id1_0_0_, pago0_.tipoPago as tipoPago2_0_0_ from Pago pago0_ where pago0_.id=?
Hibernate: update Pago set tipoPago=? where id=?
Hibernate: select pago0_.id as id1_0_0_, pago0_.tipoPago as tipoPago2_0_0_ from Pago pago0_ where pago0_.id=?
El tipo de pago esTarjeta Bancoafter()
</output>
    </test>
    <test duration="48" locationUrl="java:test://cine.model.PeliculaTest.contador" name="PeliculaTest.contador" status="failed">
        <output type="stdout">before()
Hibernate: select pelicula0_.id as id1_1_0_, pelicula0_.asientosAOcupar as asientos2_1_0_, pelicula0_.asientos as asientos3_1_0_, pelicula0_.descripcion as descripc4_1_0_, pelicula0_.fecha as fecha5_1_0_, pelicula0_.nombre as nombre6_1_0_, pelicula0_.precio as precio7_1_0_ from Pelicula pelicula0_ where pelicula0_.id=?
after()
</output>
        <output type="stderr">java.lang.AssertionError&#13;
	at org.junit.Assert.fail(Assert.java:86)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertNotNull(Assert.java:712)&#13;
	at org.junit.Assert.assertNotNull(Assert.java:722)&#13;
	at cine.model.PeliculaTest.contador(PeliculaTest.java:47)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:498)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&#13;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&#13;
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&#13;
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&#13;
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)&#13;
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&#13;
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)&#13;
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)&#13;
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)&#13;
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)&#13;
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:253)&#13;
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:498)&#13;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)&#13;
</output>
    </test>
    <test duration="111" locationUrl="java:test://cine.model.PeliculaTest.insertar" name="PeliculaTest.insertar" status="passed">
        <output type="stdout">before()
Hibernate: insert into Pago (tipoPago) values (?)
after()
</output>
    </test>
</testrun>
